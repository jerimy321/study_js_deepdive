# 26장. ES6 함수의 추가 기능

## 26.1 함수의 구분

- ES6 이전의 모든 함수는 일반 함수로서 호출할수 있는 것은 물론 생성자 함수로서 호출할 수 있다.  
   즉, ES6 이전의 모든 함수는 callable 이면서 constructor다.

객체에 바인딩된 함수가 constructor 라는 것은 객체에 바인딩된 함수가 prototype 프로퍼티를 가지며, 프로토타입 객체도 생성한다는 것을 의미.

ES6에서는 함수를 사용 목적에 따라 세 가지 종류로 명확히 분류함

| ES6 함수의 구분    | constructor | prototype | super | arguments |
| ------------------ | ----------- | --------- | ----- | --------- |
| 일반함수(Normal)   | O           | O         | X     | O         |
| 메서드(Method)     | X           | X         | O     | O         |
| 화살표 함수(Arrow) | X           | X         | X     | X         |

---

## 26.2 메서드

ES6 사양에서 메서드는 메서드 축약 표현으로 정의된 함수만을 의미한다.

```javascript
const obj = {
    x: 1,
    foo() { return this.x }
    bar: function() { return this.x }
};

console.log(obj.foo())
console.log(obj.bar())
```

ES6 사양에서 정의한 메서드는 인스턴스를 생성할 수 없는 non-constructor. 따라서 ES6 메서드는 생성자 함수로서 호출할 수 없다.

ES6 메서드는 자신을 바인딩한 객체를 가라키는 내부슬롯 [[HomeObject]]를 갖는다.  
내부 슬롯 [[HomeObject]] 를 갖는 ES6 메서드는 super 키워드 사용 가능 하다.

---

## 26.3 화살표 함수

화살표 함수는 기존의 함수 정의 방식보다 간략하게 함수를 정의할 수 있다. 특히 화살표 함수는 콜백 함수 내부에서 this가 전역 객체를 가리키는 문제를 해결하기 위한 대안으로 유용하다.

### 26.3.1 화살표 함수 정의

### 26.3.2 화살표 함수와 일반 함수의 차이

#### 01. 화살표 함수는 인스턴스를 생성할 수 없는 non-constructor다.

```javascript
const Foo = () => {};
new Foo(); //  TypeError: Foo is not a constructor
```

```javascript
const Foo = () => {};
Foo.hasOwnProperty("prototype"); // false
```

#### 02. 중복된 매개변수 이름을 선언할 수 없다.

```javascript
const arrow = (a, a) => a + a;
// SyntaxError: Duplicate parameter name not allowed in this context
```

#### 03. 화살표 함수는 함수 자체의 this, arguments, super, new.target 바인딩을 갖지 않는다.

따라서 화살표 함수 내부에서 this, arguments, super, new.target을 참조하면 스코프 체인을 통해 상위 스코프의 this, arguments, super, new.target을 참조한다.

### 26.3.3 this

화살표 함수의 this는 일반 함수의 this와 다르게 동작.

```javascript
class Prefixer {
  constructor(prefix) {
    this.prefix = prefix;
  }

  add(arr) {
    // (1)
    return arr.map(function (item) {
      return this.prefix + item; // (2)
      // TypeError: Cannot read properties of undefined (reading 'prefix')
    });
  }
}

const prefixer = new Prefixer("-webkit-");
console.log(prefixer.add(["transition", "user-select"]));
```

프로토타입 메서드 내부인 (1)에서 this는 메서드를 호출한 객체를 가리킨다. 그런데 Array.prototype.map의 인수로 전달한 콜백 함수의 내부인 (2)에서 this는 undifined를 가리킨다. 이는 Array.prototype.map 메서드가 콜백 함수를 일반 함수로서 호출하기 떄문이다.  
일반 함수로서 호출되는 모든 함수 내부의 this는 전역 객체를 가리킨다. 그런데 클래스 내부의 모든 코드에는 strict mode가 암묵적으로 적용된다. 따라서 Array.prototype.map 메서드의 콜백 함수에도 strict mode가 적용된다.  
strict mode에서 일반 함수로 호출된 모든 함수 내부의 this에는 전역 객체가 아니라 undefined가 바인딩되기 때문에 예제의 (2)에는 undefind가 바인됭 된다.  
즉, 콜백 함수의 this(2)와 외부 함수의 this(1)가 서로 다른 값을 가리키고 있기 때문에 TypeError가 발생한 것이다.

ES6에서는 화살표 함수를 사용하여 '콜백 함수 내부의 this 문제'를 해결할 수 있다.

```javascript
class Prefixer {
  constructor(prefix) {
    this.prefix = prefix;
  }

  add(arr) {
    return arr.map((item) => this.prefix + item);
  }
}

const prefixer = new Prefixer("-webkit-");
console.log(prefixer.add(["transition", "user-select"]));
```

위와 같이 화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다. 따라서 화살표 함수 내부에서 this를 참조하면, 상위 스코프의 this를 그대로 참조한다. 이를 lexical this 라고 한다.

화살표 함수 내부에서 this를 참조하면 일반적인 식별자처럼 스코프 체인을 통해 상위 스코프에서 this를 탐색한다.

```javascript
//화살표 함수는 상위 스코프의 this를 참조한다.
() => this.x;

// 익명 함수에 상위 스코프의 this를 주입한다. 위 화살표 함수와 동일하게 동작한다.
(function () {
  return this.x;
}).bind(this);
```

만약 화살표 함수와 화살표 함수가 중첩되어 있다면 상위 화살표 함수에도 this 바인딩이 없으므로 스코프 체인 상에서 가장 가까운 상위 함수 중에서 화살표 함수가 아닌 함수의 this를 참조한다.

```javascript
// 중첩 함수 foo의 상위 스코프는 즉시 실행 함수다.
// 따라서 화살표 함수 foo의 this는 상위 스코프인 즉시 실행 함수의 this를 가리킨다.
(function () {
  const foo = () => console.log(this);
  foo();
}).call({ a: 1 }); // {a: 1}

// bar 함수는 화살표 함수를 반환
// bar 함수가 반환한 화살표 함수의 상위 스코프는 화살표 함수 bar.
// 하지만 화살표 함수는 함수 자체의 this 바인딩을 갖지 않으므로,
// bar 함수가 반환한 화살표 함수 내부에서 참조하는 this는
// 화살표 함수가 아닌, 즉시 실행 함수의 this를 가리키게 된다.

(function () {
  const bar = () => () => console.log(this);
  bar()();
}).call({ a: 1 }); // {a: 1}
```

만약 화살표 함수가 전역 함수라면 화살표 함수의 this는 전역 객체를 가리킴.

```javascript
const foo = () => console.log(this);
foo(); // window
```

### 26.3.4 super

### 26.3.5 arguments

## 26.4 Rest 파라미터

### 24.4.1 기본 문법

### 24.4.2 Rest 파라미터와 arguments 객체

## 26.5 매개변수 기본값
